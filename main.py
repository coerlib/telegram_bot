import re
from datetime import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.exceptions import MessageToDeleteNotFound

from config import API_TOKEN

from requests import *

storage = MemoryStorage()
bot = Bot(API_TOKEN)
dp = Dispatcher(bot, storage=storage)


# —Ñ—É–Ω–∫—Ü–∏–∏
async def get_doctors_buttons() -> InlineKeyboardMarkup:
    doctors = await get_doctors()
    buttons = []
    if doctors:
        for doctor in doctors:
            buttons.append(
                InlineKeyboardButton(text=doctor['full_name'], callback_data=f"set_doctor_{doctor['user_id']}"))
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        return keyboard
    return -1


async def combine_chats(available_chats, current_chats):
    combined_chats = []

    for available_chat in available_chats:
        user_id = available_chat
        found_chat = None
        for chat in current_chats:
            if chat['interlocutor_id'] == user_id:
                found_chat = chat
                break
        if found_chat:
            combined_chats.append(found_chat)
        else:
            new_chat_info = {
                'user_id': user_id,
                'interlocutor_id': user_id,
                'last_date': "-",
                'last_message': '–ù–æ–≤—ã–π —á–∞—Ç',
                'new': "-"
            }
            combined_chats.append(new_chat_info)

    return combined_chats


# —Å–æ—Å—Ç–æ—è–Ω–∏—è
class PatientProfileStatesGroup(StatesGroup):
    fullName = State()
    text = State()


async def on_start_up(_):
    await db_start()


# –∫–æ–º–∞–Ω–¥—ã

@dp.message_handler(commands=['test'])
async def test(message: types.Message, state: FSMContext):
    chat = await get_chat2(message.from_user.id, await get_current_user_id(message.from_user.id))
    for message in chat:
        print(message)


@dp.message_handler(commands=['cancel'], state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    sent_message = await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã', '', '', 'bot',
                      message.chat.id, 0)
    await bot.delete_message(message.chat.id, message.message_id)


@dp.message_handler(commands=['id'])
async def send_chat_history(message: types.Message):
    print(message.from_user.id)
    text = f"<code>{message.from_user.id}</code>"
    await bot.send_message(message.from_user.id, text, parse_mode='HTML')


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–ø–∞—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ –≤—Ä–∞—á–µ–π"),
        ],
        [
            types.KeyboardButton(text="–ö —á–∞—Ç–∞–º"),
        ],
    ]
    keyboardAdmin = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    kb = [
        [
            types.KeyboardButton(text="–ö —á–∞—Ç–∞–º"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    if await is_new_patient(message.from_user.id):
        sent_message = await bot.send_message(message.chat.id, f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏', '', '', 'bot',
                          message.chat.id, 0)

        await PatientProfileStatesGroup.fullName.set()
    else:
        if await get_role_by_id(message.from_user.id) == 'admin':
            sent_message = await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=keyboardAdmin)
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '', '', 'bot',
                      message.chat.id, 0)
            # await message.reply("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=keyboard)
        elif await get_role_by_id(message.from_user.id) == 'doctor':
            sent_message = await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –¥–æ–∫—Ç–æ—Ä!", reply_markup=keyboard)
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '', '', 'bot',
                      message.chat.id, 0)

    await bot.delete_message(message.chat.id, message.message_id)


@dp.message_handler(commands=['delete'])
async def delete_message(message: types.Message):
    messages = await get_message_ids_by_chat_id(message.chat.id)
    if messages and len(messages) > 0:
        for message_id in messages:
            try:
                await bot.delete_message(message.chat.id, message_id)
                await set_display_status(message_id)
            except MessageToDeleteNotFound:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except MessageToDeleteNotFound:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")


@dp.message_handler(commands=['chat'])
async def show_chats(message: types.Message):
    user_id = message.from_user.id
    role = await get_role_by_id(user_id)
    chats = []
    
    chats = await get_chats(user_id, role)

    await delete_message(message)
    await set_current_user_id(user_id, '')
    if chats:

        # chats.sort(key=lambda x: datetime.strptime(x['last_date'], "%Y-%m-%d %H:%M:%S"), reverse=False) #—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        def custom_key(item):
            if item['last_date'] != "-":
                return datetime.strptime(item['last_date'], "%Y-%m-%d %H:%M:%S")
            else:
                return datetime.min  # –ü–æ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å "-" –≤ –∫–æ–Ω–µ—Ü

        chats.sort(key=custom_key, reverse=False)

        chatBtn = [
            [
                types.KeyboardButton(text="–ö —á–∞—Ç–∞–º"),
            ],
        ]
        keyboard–°hatBtn = types.ReplyKeyboardMarkup(keyboard=chatBtn, resize_keyboard=True)
        sent_message = await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º –±—É–¥–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è", reply_markup=keyboard–°hatBtn)
        
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–≤—ã–≤–æ–¥ —á–∞—Ç–æ–≤', '', '', 'bot',
                            message.chat.id, 0)

        for chat in chats:
            interlocutor_role = await get_role_by_id(chat['interlocutor'])
            smile = "üë® "
            if interlocutor_role == 'admin':
                smile = "üíº "
            elif interlocutor_role == 'doctor':
                smile = "üë®‚Äç‚öïÔ∏è "
            chat_name = f"{smile}{await get_full_name_by_id(chat['interlocutor'])}"

            if str(chat['user_id']) == "-":
                last_user = "-"
            elif str(user_id) == str(chat['user_id']):
                last_user = "–≤—ã"
            else:
                last_user = await get_full_name_by_id(chat['user_id'])

            date = chat['last_date']
            text = chat['last_message']
            new_message = chat['new_message']

            message_text = f"–ß–∞—Ç —Å  {chat_name}\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {last_user}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date}"
            if new_message == 1:
                message_text += "\n–ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è‚ÄºÔ∏è"

            inline_button = InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç", callback_data=f"choose_chat_{chat['interlocutor']}")
            keyboard = InlineKeyboardMarkup().add(inline_button)

            sent_message = await bot.send_message(chat_id=user_id, text=message_text, reply_markup=keyboard)
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–≤—ã–≤–æ–¥ —á–∞—Ç–æ–≤', '', '', 'bot', user_id, 0)
    else:
        chatBtn = [
            [
                types.KeyboardButton(text="–ö —á–∞—Ç–∞–º"),
            ],
        ]
        keyboard–°hatBtn = types.ReplyKeyboardMarkup(keyboard=chatBtn, resize_keyboard=True)

        sent_message = await bot.send_message(chat_id=message.chat.id, text="–î–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
                                              reply_markup=keyboard–°hatBtn)
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '', '', '', 'bot',
                            message.chat.id, 0)
        

@dp.message_handler(commands=['admins'])
async def show_admins(message: types.Message):
    if (await is_main_admin(message.from_user.id)):
        admins = await get_admins()

        if not admins:
            sent_message = await bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç")
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç', '', '', 'bot',
                            message.chat.id, 0)
            return
        
        for admin in admins:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ —Å callback_data, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º id –∞–¥–º–∏–Ω–∞
            inline_button = InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin}", callback_data=f"delete_admin_{admin}")
            keyboard = InlineKeyboardMarkup().add(inline_button)

            sent_message = await bot.send_message(message.chat.id, text=f"–ê–¥–º–∏–Ω {admin}", reply_markup=keyboard)
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', f'–≤—ã–≤–æ–¥ –∞–¥–º–∏–Ω–æ–≤', '', '', 'bot',
                            message.chat.id, 0)


@dp.message_handler(commands=['doctors'])
async def show_doctors(message: types.Message):
    if (await is_main_admin(message.from_user.id)):
        doctors = await get_doctors()

        if not doctors:
            sent_message = await bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –ø—É—Å—Ç")
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –ø—É—Å—Ç', '', '', 'bot',
                            message.chat.id, 0)
            return
        
        for doctor in doctors:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞ —Å callback_data, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º id –≤—Ä–∞—á–∞
            inline_button = InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞ {await get_full_name_by_id(doctor)}", callback_data=f"delete_doctor_{doctor}")
            keyboard = InlineKeyboardMarkup().add(inline_button)

            sent_message = await bot.send_message(message.chat.id, text=f"–í—Ä–∞—á {await get_full_name_by_id(doctor)}", reply_markup=keyboard)
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', f'–≤—ã–≤–æ–¥ –≤—Ä–∞—á–µ–π', '', '', 'bot',
                            message.chat.id, 0)

# —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(lambda message: message.text == '–ø–∞—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ –≤—Ä–∞—á–µ–π')
async def send_patients_with_buttons(message: types.Message):
    await set_message(message.message_id, message.chat.id, 'service', '', '', '', 'bot', message.chat.id, 0)

    patients = await get_patients_without_doctor()

    if not patients:
        sent_message = await bot.send_message(chat_id=message.chat.id, text="–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π")
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π', '',
                          '', 'bot',
                          message.chat.id, 0)
        return

    for patient in patients:
        full_name = patient['full_name']

        text = f"#{patient['user_id']}\n–ü–∞—Ü–∏–µ–Ω—Ç: {full_name}\n–í—Ä–∞—á: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        inline_button = InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–∞—á–∞", callback_data=f"add_doctor_{patient['user_id']}")

        keyboard = InlineKeyboardMarkup().add(inline_button)

        sent_message = await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard)
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–≤—ã–≤–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤—Ä–∞—á–µ–π', '',
                          '', 'bot',
                          message.chat.id, 0)
        

@dp.message_handler(lambda message: message.text == '–ö —á–∞—Ç–∞–º')
async def send_patients_with_buttons(message: types.Message):
    await show_chats(message)
    

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_admin_'))
async def process_delete_admin(callback_query: CallbackQuery):
    admin_id = callback_query.data.split('_')[-1]
    
    # –í–∞—à –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ admin_id
    await delete_admin_by_id(admin_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω
    sent_message = await bot.send_message(callback_query.message.chat.id, f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', f'–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω', '', '', 'bot',
                      callback_query.message.chat.id, 0)
    await bot.answer_callback_query(callback_query.id, f"")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delete_doctor_'))
async def process_delete_doctor(callback_query: CallbackQuery):
    doctor_id = callback_query.data.split('_')[-1]
    name = await get_full_name_by_id(doctor_id)
    
    # –í–∞—à –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ admin_id
    await delete_doctor_by_id(doctor_id)
    await delete_patient_doctor(doctor_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω
    sent_message = await bot.send_message(callback_query.message.chat.id, f"–í—Ä–∞—á {name} —É–¥–∞–ª–µ–Ω")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', f'–í—Ä–∞—á {name} —É–¥–∞–ª–µ–Ω', '', '', 'bot',
                      callback_query.message.chat.id, 0)
    await bot.answer_callback_query(callback_query.id, f"")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_doctor_'))
async def process_add_doctor(callback_query: CallbackQuery):
    patient_id = callback_query.data.split('_')[-1]

    buttons = await get_doctors_buttons()
    if buttons != -1:
        sent_message = await bot.send_message(chat_id=callback_query.message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}",
                               reply_markup=await get_doctors_buttons())
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞', '', '',
                          'bot', callback_query.message.chat.id, 0)

    else:
        await bot.send_message(chat_id=callback_query.message.chat.id, text=f"–ù–µ—Ç –≤—Ä–∞—á–µ–π")
    await bot.answer_callback_query(callback_query.id, text=f"")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('set_doctor_'))
async def process_set_doctor(callback_query: CallbackQuery, state: FSMContext):
    patient_id = callback_query.message.text.split(' ')[-1]
    doctor_id = callback_query.data.split('_')[-1]

    await set_doctor(patient_id, doctor_id)

    sent_message = await bot.send_message(chat_id=callback_query.message.chat.id, text=f"–í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞', '', '',
                      'bot', callback_query.message.chat.id, 0)
    sent_message = await bot.send_message(patient_id, f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—Ä–∞—á: {await get_full_name_by_id(doctor_id)}")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤—Ä–∞—á', '', '',
                      'bot', patient_id, 0)
    sent_message = await bot.send_message(doctor_id, f"#{patient_id}\n–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç: {await get_full_name_by_id(patient_id)}")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç', '', '',
                      'bot', doctor_id, 0)
    await bot.answer_callback_query(callback_query.id, f"")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('choose_chat_'))
async def process_set_doctor(callback_query: CallbackQuery, state: FSMContext):
    current_user = callback_query.data.split('_')[-1]
    await set_current_user_id(callback_query.message.chat.id, current_user)

    await delete_message(callback_query.message)

    history = f""
    user_id = callback_query.message.chat.id
    chat = await get_chat2(user_id, await get_current_user_id(user_id))

    new_messages = []
    if chat:
        for message in chat:
            if message['new_message'] == 0:
                role = await get_role_by_id(message['from_user'])
                smile = "üë® "
                if role == 'admin':
                    smile = "üíº "
                elif role == 'doctor':
                    smile = "üë®‚Äç‚öïÔ∏è "
                
                message_text = f"{smile}"
                if message['from_user'] == str(user_id):
                    message_text += "–í—ã: "
                else:
                    message_text += f"{await get_full_name_by_id(await get_current_user_id(user_id))}: "
                    
                if message['type'] == 'text':
                    message_text += f"{message['text']}\n\n"
                elif message['type'] == 'photo':
                    if message['text'] and len(message['text']) > 0:
                        message_text += f"{message['text']}\n\n"
                    else:
                        message_text += "(—Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

                history += message_text
            else:
                new_messages.append(message)
    else:
        history = '–ù–∞—á–∞—Ç—å —á–∞—Ç'

    if history and len(history):
        sent_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                            text=f"{history}")
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', '', '',
                        'bot', callback_query.message.chat.id, 0)
                      
    
    if new_messages and len(new_messages) > 0: #todo —Ç—É—Ç –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ñ–æ—Ç–∫–∏ –µ—â–µ
        sent_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                          text=f"‚¨áÔ∏è–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è‚¨áÔ∏è")
        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', '', '',
                        'bot', callback_query.message.chat.id, 0)
        
        for new_message in new_messages:
            sent_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                          text=f"{new_message['text']}")
            await set_readability(new_message['message_id'])
            # —É–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–æ–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏', '', '',
                      'bot', callback_query.message.chat.id, 0)
            
    chatBtn = [
        [
            types.KeyboardButton(text="–ö —á–∞—Ç–∞–º"),
        ],
    ]
    keyboard–°hatBtn = types.ReplyKeyboardMarkup(keyboard=chatBtn, resize_keyboard=True)
    sent_message = await bot.send_message(chat_id=callback_query.message.chat.id,
                                          text=f" -- –í—ã–±—Ä–∞–Ω —á–∞—Ç —Å {await get_full_name_by_id(current_user)}", reply_markup=keyboard–°hatBtn)
    
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–≤—ã–±—Ä–∞–Ω —á–∞—Ç', '', '',
                      'bot', callback_query.message.chat.id, 0)
    await bot.answer_callback_query(callback_query.id, f"")


# —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state=PatientProfileStatesGroup.fullName)
async def process_fio(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['full_name'] = message.text
        data['user_id'] = message.chat.id

        await set_message(message.message_id, message.chat.id, message.content_type, message.text, '', message.date,
            message.from_user.id, 'bot', 0)

    sent_message = await bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–ø–µ—Ä–≤–∞—è –∂–∞–ª–æ–±–∞', '', '', 'bot',
                      message.chat.id, 0)
    await PatientProfileStatesGroup.next()


@dp.message_handler(state=PatientProfileStatesGroup.text)
async def process_text(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['text'] = message.text
        await create_patient(data["user_id"], data["full_name"])

        await set_message(message.message_id, message.chat.id, message.content_type, message.text, '', message.date,
                              message.from_user.id, 'bot', 0)

        chatBtn = [
            [
                types.KeyboardButton(text="–ö —á–∞—Ç–∞–º"),
            ],
        ]
        keyboard–°hatBtn = types.ReplyKeyboardMarkup(keyboard=chatBtn, resize_keyboard=True)
        sent_message = await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=keyboard–°hatBtn)

        await set_message(sent_message.message_id, sent_message.chat.id, 'service', '—Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '', '', 'bot',
                          message.chat.id, 0)

        for admin in await get_admins():
            sent_message = await bot.send_message(admin,
                                   f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!!!\n\n#{message.from_user.id}\nüë® {await get_full_name_by_id(message.from_user.id)}\n\n{message.text}")
            await set_message(sent_message.message_id, sent_message.chat.id, 'service', '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '',
                              '', 'bot', message.chat.id, 0)


    await state.finish()


# —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=["text", "photo"])
async def send_message(message: types.Message):
    current_user = await get_current_user_id(message.from_user.id)
    from_user = message.from_user.id
    to_user = current_user

    role = await get_role_by_id(from_user)

    if message.photo:
        photo_caption = message.caption if message.caption else ''  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å —É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if role == "patient":
            message_text = f"üë® {await get_full_name_by_id(from_user)}\n\n{photo_caption}"
        elif role == "doctor":
            message_text = f"üë®‚Äç‚öïÔ∏è {await get_full_name_by_id(from_user)}\n\n{photo_caption}"
        elif role == "admin":
            message_text = f"üíº –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n{photo_caption}"
    else:
        if role == "patient":
            message_text = f"üë® {await get_full_name_by_id(from_user)}\n\n{message.text}"
        elif role == "doctor":
            message_text = f"üë®‚Äç‚öïÔ∏è {await get_full_name_by_id(from_user)}\n\n{message.text}"
        elif role == "admin":
            message_text = f"üíº –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n{message.text}"

    if role == "patient" or role == "doctor" or role == "admin":
        if message.photo:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
            photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo_link = photo.file_id  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ

            new_message = 0 
            if str(await get_current_user_id(to_user)) != str(from_user): # –æ–±—â–∞–µ—Ç—Å—è –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–µ–π—á–∞—Å —Å –∫–µ–º-—Ç–æ –∏–ª–∏ –Ω–µ—Ç
                new_message = 1

            if to_user:
                await set_message(message.message_id, message.chat.id, 'photo', photo_caption, photo_link, message.date,
                              from_user, to_user, new_message)
            else:
                await set_message(message.message_id, message.chat.id, 'photo', photo_caption, photo_link, message.date,
                              from_user, 'admin', new_message)

            if to_user:
                if new_message == 0:
                    sent_message = await bot.send_photo(to_user, photo.file_id, caption=message_text)
                    await set_message(sent_message.message_id, sent_message.chat.id, 'service', message_text, '', sent_message.date,
                                    'bot', to_user, 0) #todo –¥–æ–±–∞–≤–∏—Ç—å1
                else:
                    sent_message = await bot.send_message(to_user, "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    await set_message(sent_message.message_id, sent_message.chat.id, 'service', "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", '', sent_message.date,
                                  'bot', to_user, 0) #todo –¥–æ–±–∞–≤–∏—Ç—å1

            else:
                for admin in await get_admins():
                    sent_message = await bot.send_photo(admin, photo.file_id, caption=message_text)
                    await set_message(sent_message.message_id, sent_message.chat.id, 'service', message_text, '', sent_message.date,
                                      'bot', admin, 0) #todo –¥–æ–±–∞–≤–∏—Ç—å1
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = 0 
            if str(await get_current_user_id(to_user)) != str(from_user): # –æ–±—â–∞–µ—Ç—Å—è –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–µ–π—á–∞—Å —Å –∫–µ–º-—Ç–æ –∏–ª–∏ –Ω–µ—Ç
                new_message = 1

            if to_user:
                await set_message(message.message_id, message.chat.id, 'text', message.text, '', message.date,
                              from_user, to_user, new_message)
            else:
                await set_message(message.message_id, message.chat.id, 'text', message.text, '', message.date,
                              from_user, 'admin', new_message)

            if to_user:
                if new_message == 0:
                    sent_message = await bot.send_message(to_user, message_text)
                    await set_message(sent_message.message_id, sent_message.chat.id, 'service', message_text, '', sent_message.date,
                                  'bot', to_user, 0) #todo –¥–æ–±–∞–≤–∏—Ç—å1
                else:
                    sent_message = await bot.send_message(to_user, "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    await set_message(sent_message.message_id, sent_message.chat.id, 'service', "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", '', sent_message.date,
                                  'bot', to_user, 0) #todo –¥–æ–±–∞–≤–∏—Ç—å1
            else:
                for admin in await get_admins():                    
                    sent_message = await bot.send_message(admin, message_text)
                    await set_message(sent_message.message_id, sent_message.chat.id, 'service', message_text, '', sent_message.date,
                                      'bot', admin, 0) #todo –¥–æ–±–∞–≤–∏—Ç—å1
    else:
        print('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_start_up)
